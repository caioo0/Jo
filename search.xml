<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spark学习之什么是大数据</title>
    <url>/2020/01/29/Spark%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%BA%E5%A4%A7%E7%9A%84spark/</url>
    <content><![CDATA[<h2 id="什么是大数据？"><a href="#什么是大数据？" class="headerlink" title="什么是大数据？"></a>什么是大数据？</h2><p>对于大数据，麦肯锡全球研究所给出的定义是：</p>
<blockquote>
<p>”一种规模大到在获取、存储、管理、分析方面大大超出了传统数据库软件工具能力范围的数据集合。“</p>
</blockquote>
<p>大数据具有五大特点，称为5V。</p>
<p>1) 多样 （Variety）</p>
<p>大数据的多样性是指数据的种类和来源是多样化的，数据可以是结构化的、半结构化的以及非结构化的，数据的呈现形式包括但不仅限于文本，图像，视频，HTML页面等等。</p>
<p>2) 大量（Velocity）</p>
<p>大数据的大量性是指数据量的大小</p>
<p>3）高速 （Velocity）</p>
<p>大数据的高速性是指数据增长快速，处理快速，每一天，各行各业的数据都在呈现指数性爆炸增长。在许多场景下，数据都具有时效性，如搜索引擎要在几秒内呈现出用户所需数据。企业或者系统在面对快速增长的海量数据时，必须要高速处理，快速响应。</p>
<p>4）低价值密度（Value）</p>
<p>大数据的低价值密度性是指在海量的数据源中，真正有价值的数据少之又少，许多数据可能是错误的，是不完整的，是无法利用的。总体而言，有价值的数据占据数据总量的密度极低，提炼数据好比浪里淘沙</p>
<p>5) 真实性 （Veracity）</p>
<p>大数据的真实性是指数据的准确度和可信赖度，代表数据的质量。</p>
<h4 id="更多资料：http-www-sohu-com-a-328555916-114819"><a href="#更多资料：http-www-sohu-com-a-328555916-114819" class="headerlink" title="更多资料：http://www.sohu.com/a/328555916_114819"></a>更多资料：<a href="http://www.sohu.com/a/328555916_114819" target="_blank" rel="noopener">http://www.sohu.com/a/328555916_114819</a></h4><h2 id="每个人都应该知道的硬件知识"><a href="#每个人都应该知道的硬件知识" class="headerlink" title="每个人都应该知道的硬件知识"></a>每个人都应该知道的硬件知识</h2><p><strong>中央处理器 (CPU)</strong> <code>0.4ns</code></p>
<p>CPU 是电脑的中枢，计算机上的每个进程最终都由CPU处理，包括计算以及给电脑其他组件发出的指令。</p>
<p><strong>内存 (RAM)</strong> <code>100ns</code></p>
<p>程序运行时，在进入CPU之前，数据会临时存储在内存里。内存是临时存储，当电脑关闭时，内存中的数据就会丢失。</p>
<p><strong>存储 (固态硬盘 或 磁盘)</strong> <code>16us</code></p>
<p>存储是用于长时间保存数据的地方。程序运行时 CPU会让内存从长期存储中加载数据。</p>
<p><strong>网络 (局域网 或者叫 互联网)</strong> <code>150ms</code></p>
<p>网络是你获取任何未存储在计算机上的数据的通道。网络可以连接同个房间里的电脑（局域网）或者通过互联网连接世界另一头的电脑。</p>
<p>其实，还有一些涉及一级和二级缓存、互斥锁定和分支错误预测的知识。虽然它们对于详细了解计算机内部的情况很重要，但对于本课程，你暂时不用了解这些。点击链接了解更多：<a href="http://norvig.com/21-days.html" target="_blank" rel="noopener">Peter Norvig</a> 的博客 ；硬件的<a href="https://colin-scott.github.io/personal_website/research/interactive_latency.html" target="_blank" rel="noopener">交互式版本</a>。</p>
<h3 id="中央处理器："><a href="#中央处理器：" class="headerlink" title="中央处理器："></a><strong>中央处理器：</strong></h3><p>CPU是电脑的中枢。CPU有多个功能，包括给电脑的其他组件发送指令以及进行数学计算。CPU还会把少量的数据存在注册表里。存储器保存着CPU正在处理的数据。</p>
<p>例如,你编写一个程序读取40MB 数据文件，然后分析该文件。当你执行代码时，指令会载入CPU。然后CPU指示计算机从硬盘读取40MB数据到内存（RAM）。如果对一列数据求和，那CPU会一次取两个数字，将他们相加。当CPU获取下一个数字时，之前累计的总和需要存储在某处。</p>
<p>这个累计总和就会被存在注册表里。注册表使计算更高效：避免了在内存（RAM）和CPU之间不必要地来回发送数据。</p>
<blockquote>
<p><strong>习题1：</strong>2.5千兆赫的CPU意味着CPU每秒处理25亿次操作，如果每个操作 CPU处理8个字节的数据，那这个 CPU 一秒钟可以处理多少字节的数据呢？</p>
<p><strong>解答：</strong>每秒25亿次操作 * 每次操作8个字节=每秒200亿字节</p>
</blockquote>
<blockquote>
<p><strong>习题2:</strong><br>Twitter每秒生成约 6000 条推文，每条推文包含 200 个字节。所以一天 Twitter 产生的数据量级是:</p>
</blockquote>
<p>$$<br>(6000 推文 / 秒) x (86400 秒 / 天) x (200 字节 / 推文) ~ 1040 亿字节 / 天<br>$$</p>
<blockquote>
<p>知道 Twitter 每天创建大约1040亿字节的数据，那2.5 千兆赫的 CPU需要多长时间才能分析一整天的推文呢？</p>
</blockquote>
<blockquote>
<p><strong>解答：</strong>A = (6000<em> 86400</em>200)/200000000000 = 0.5184 秒</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Workderman禁用函数检查</title>
    <url>/2019/01/23/workerman-1/</url>
    <content><![CDATA[<h2 id="Workderman禁用函数检查"><a href="#Workderman禁用函数检查" class="headerlink" title="Workderman禁用函数检查"></a>Workderman禁用函数检查</h2><p>使用这个脚本检查是否有禁用函数。命令行运行</p>
<blockquote>
<p>curl -Ss <a href="http://www.workerman.net/check.php" target="_blank" rel="noopener">http://www.workerman.net/check.php</a> | php</p>
</blockquote>
<p>如果有提示Function stream_socket_server may be disabled. Please check disable_functions in php.ini说明workerman依赖的函数被禁用，需要在php.ini中解除禁用才能正常使用workerman。</p>
<p>步骤如下：</p>
<p>1、运行php –ini 找到php cli所使用的php.ini文件位置</p>
<p>2、打开php.ini，找到disable_functions一项解除stream_socket_server的禁用</p>
]]></content>
  </entry>
  <entry>
    <title>使用python计算微积分学习笔记</title>
    <url>/2019/01/07/%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="使用python计算微积分之一函数篇"><a href="#使用python计算微积分之一函数篇" class="headerlink" title="使用python计算微积分之一函数篇"></a>使用python计算微积分之一函数篇</h2><p>我们可以将<strong>函数(functions)</strong>想象成一台机器$f$  ，每当我们向机器提供输入$x$，这台机器便会产生输出$f(x)$。</p>
<p>这台机器所能接受的所有输入的集合称为<strong>定义域(domain)</strong>，其所有可能输出的集合称为<strong>值域(range)</strong>。函数的定义域和值域有着非常重要的意义，如果我们知道一个函数的定义域，便不会将不合适的输入丢给函数；知道函数的值域，便能判断一个值是否可能是这个函数所输出的。</p>
<h3 id="多项式-polynomials-："><a href="#多项式-polynomials-：" class="headerlink" title="多项式(polynomials)："></a>多项式(polynomials)：</h3><p>\begin{align}<br>f(x) = x^3 - 5x^2 +9<br>\end{align}</p>
<p>因为这是一个三次函数，当$x\to-\infty$时$f(x)\to-\infty$;当$x\to\infty$时$f(x)\to\infty$,因此这个函数的定义域和值域都是实属集$\mathbb{R}$<br><strong>Python实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">3</span> - <span class="number">5</span>*x**<span class="number">2</span> +<span class="number">9</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"结果：X=3，f(x)="</span>,f(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果：X=3，f(x)= -9</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">-5</span>,<span class="number">5</span>,num=<span class="number">100</span>)</span><br><span class="line">y = f(x)</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/output_5_0.png" alt="png"></p>
<h3 id="指数函数-Exponential-Functions"><a href="#指数函数-Exponential-Functions" class="headerlink" title="指数函数(Exponential Functions):"></a>指数函数(Exponential Functions):</h3><p><strong> $exp(x)=e^x$ </strong></p>
<p>其定义域为$(-\infty,\infty)$,值域为$(0,\infty)$。在Python中，利用欧拉常数$e$可以如下方式定义指数函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.e**x</span><br><span class="line"></span><br><span class="line">print(exp(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7.3890560989306495</span><br></pre></td></tr></table></figure>
<p>或者可以使用numpy自带的指数函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.exp(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7.38905609893065</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">-5</span>,<span class="number">5</span>,num=<span class="number">100</span>)</span><br><span class="line">y = exp(x)</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/output_12_0.png" alt="png"></p>
<p>注意到，上面的Python定义中，我们只是利用了numpy中现成的欧拉常数$e$,如果没有这个神奇的常数，我们是否就无法定义指数函数了呢？答案是否定的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp2</span><span class="params">(x)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        sum += float(x**k)/np.math.factorial(k)</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (exp2(<span class="number">1</span>),exp2(<span class="number">2</span>),exp2(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.7182818284590455 7.389056098930649 20.08553692318766</span><br></pre></td></tr></table></figure>
<p>上面定义中的奇妙公式：<br>$e^x = \sum_{k=0}^\infty \frac{x^k}{k!} $<br>究竟是从何而来，又为何是这样的，将是本书讨论的重点之一。</p>
<h3 id="对数函数（Logarithmic-Functions）"><a href="#对数函数（Logarithmic-Functions）" class="headerlink" title="对数函数（Logarithmic Functions）:"></a>对数函数（Logarithmic Functions）:</h3><p><strong> $log_e(x) = ln(x)$ </strong> </p>
<p>对数函数是指数函数的反函数，其定义域为$(0,\infty)$,值域$(-\infty,\infty)$。<br>numpy为我们提供了以$2,e,10$为底的对数函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">100</span>,endpoint = <span class="keyword">False</span>)</span><br><span class="line">y1=np.log2(x)</span><br><span class="line">y2=np.log(x)</span><br><span class="line">y3=np.log10(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y1,<span class="string">'red'</span>,x,y2,<span class="string">'yellow'</span>,x,y3,<span class="string">'blue'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/output_17_0.png" alt="png"></p>
<h3 id="三角函数（Trigonometic-Functions）"><a href="#三角函数（Trigonometic-Functions）" class="headerlink" title="三角函数（Trigonometic Functions）:"></a>三角函数（Trigonometic Functions）:</h3><p>周期性的三角函数的特点之一，同时，不同三角函数的值域和定义域也需要我们牢记，下面是Python绘制的一些三角函数的函数图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(np.linspace(<span class="number">-2</span>*np.pi,<span class="number">2</span>*np.pi),</span><br><span class="line">      np.sin(np.linspace(<span class="number">-2</span>*np.pi,<span class="number">2</span>*np.pi)))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/output_20_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(np.linspace(<span class="number">-2</span>*np.pi,<span class="number">2</span>*np.pi),</span><br><span class="line">      np.cos(np.linspace(<span class="number">-2</span>*np.pi,<span class="number">2</span>*np.pi)))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/output_21_0.png" alt="png"></p>
<p>这里我们没有给出对数函数和三角函数的数学表达式，没有告诉大家如何在Python中定义自己的对数函数和三角函数。这并不表述我们没法这么做，与指数函数一样，我们会在后面章节为读者揭开这些奇妙函数背后的故事。</p>
<p>参考：</p>
<p><a href="https://ryancheunggit.gitbooks.io/calculus-with-python/content/01Functions.html" target="_blank" rel="noopener">用Python学习微积分</a></p>
<p><a href="http://mohu.org/info/symbols/symbols.htm" target="_blank" rel="noopener">常用数学符号的 LaTeX 表示方法</a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>实现一个简单的推荐系统</title>
    <url>/2018/11/16/recommended/</url>
    <content><![CDATA[<p>假设我们现在要为一个在线音乐网站的用户推荐乐队。用户可以用1至5星来评价一个乐队，其中包含半星（如2.5星）。下表展示了8位用户对8支乐队的评价：<br><img src="https://dataminingguide.books.yourtion.com/img/chapter-2/chapter-2-13.png" alt="乐队评分"></p>
<p>表中的短横表示这位用户没有给这支乐队打分。我们在计算两个用户的距离时，只采用他们都评价过的乐队，比如要计算Angelica和Bill的距离，我们只会用到5支乐队。这两个用户的曼哈顿距离为：<br><img src="https://dataminingguide.books.yourtion.com/img/chapter-2/chapter-2-14.png" alt="乐队评分"></p>
<p>最后距离即是上方数据的加和：(1.5 + 1.5 + 3 + 2 + 1)。<br>计算欧几里得距离的方法也是类似的，我们也只取双方都评价过的乐队。<br><img src="https://dataminingguide.books.yourtion.com/img/chapter-2/chapter-2-15.png" alt="乐队评分"></p>
<p>用公式来描述即：<br><img src="https://dataminingguide.books.yourtion.com/img/chapter-2/chapter-2-16.png" alt="乐队评分"></p>
<p>掌握了吗？ 那就试试计算其他几个用户之间的距离吧。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>推荐</tag>
      </tags>
  </entry>
</search>
