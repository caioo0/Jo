<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用python计算微积分之函数篇]]></title>
    <url>%2F2019%2F01%2F07%2F%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[公式参考：常用数学符号的 LaTeX 表示方法 我们可以将函数(functions)想象成一台机器$f$ ，每当我们向机器提供输入$x$，这台机器便会产生输出$f(x)$。 这台机器所能接受的所有输入的集合称为定义域(domain)，其所有可能输出的集合称为值域(range)。函数的定义域和值域有着非常重要的意义，如果我们知道一个函数的定义域，便不会将不合适的输入丢给函数；知道函数的值域，便能判断一个值是否可能是这个函数所输出的。 1.多项式(polynomials)：$$f(x) = x^3 - 5x^2 +9 $$ 因为这是一个三次函数，当$x\to-\infty$时$f(x)\to-\infty$;当$x\to\infty$时$f(x)\to\infty$,因此这个函数的定义域和值域都是实属集$\mathbb{R}$Python实现： 12def f(x): return x**3 - 5*x**2 +9 1print("结果：X=3，f(x)=",f(3)) 1结果：X=3，f(x)= -9 123456import numpy as npx = np.linspace(-5,5,num=100)y = f(x)import matplotlib.pyplot as pltplt.plot(x,y)plt.show() 指数函数(Exponential Functions):$exp(x)=e^x$其定义域为$(-\infty,\infty)$,值域为$(0,\infty)$。在Python中，利用欧拉常数$e$可以如下方式定义指数函数： 1234def exp(x): return np.e**xprint(exp(2)) 17.3890560989306495 或者可以使用numpy自带的指数函数 1np.exp(2) 17.38905609893065 123456import numpy as npx = np.linspace(-5,5,num=100)y = exp(x)import matplotlib.pyplot as pltplt.plot(x,y)plt.show() 注意到，上面的Python定义中，我们只是利用了numpy中现成的欧拉常数$e$,如果没有这个神奇的常数，我们是否就无法定义指数函数了呢？答案是否定的： 1234567def exp2(x): sum = 0 for k in range(100): sum += float(x**k)/np.math.factorial(k) return sumprint (exp2(1),exp2(2),exp2(3)) 12.7182818284590455 7.389056098930649 20.08553692318766 上面定义中的奇妙公式：$e^x = \sum_{k=0}^\infty \frac{x^k}{k!} $究竟是从何而来，又为何是这样的，将是本书讨论的重点之一。 对数函数（Logarithmic Functions）:$log_e(x) = ln(x)$对数函数是指数函数的反函数，其定义域为$(0,\infty)$,值域$(-\infty,\infty)$。numpy为我们提供了以$2,e,10$为底的对数函数： 12345678910import warningswarnings.filterwarnings('ignore')import numpy as npx = np.linspace(0,10,100,endpoint = False)y1=np.log2(x)y2=np.log(x)y3=np.log10(x)plt.plot(x,y1,'red',x,y2,'yellow',x,y3,'blue')plt.show() 4. 三角函数（Trigonometic Functions）:周期性的三角函数的特点之一，同时，不同三角函数的值域和定义域也需要我们牢记，下面是Python绘制的一些三角函数的函数图： 12plt.plot(np.linspace(-2*np.pi,2*np.pi),np.sin(np.linspace(-2*np.pi,2*np.pi)))plt.show() 12plt.plot(np.linspace(-2*np.pi,2*np.pi),np.cos(np.linspace(-2*np.pi,2*np.pi)))plt.show() 这里我们没有给出对数函数和三角函数的数学表达式，没有告诉大家如何在Python中定义自己的对数函数和三角函数。这并不表述我们没法这么做，与指数函数一样，我们会在后面章节为读者揭开这些奇妙函数背后的故事。 本文摘自：https://ryancheunggit.gitbooks.io/calculus-with-python/content/01Functions.html 12]]></content>
  </entry>
  <entry>
    <title><![CDATA[实现一个简单的推荐系统]]></title>
    <url>%2F2018%2F11%2F16%2Frecommended%2F</url>
    <content type="text"><![CDATA[假设我们现在要为一个在线音乐网站的用户推荐乐队。用户可以用1至5星来评价一个乐队，其中包含半星（如2.5星）。下表展示了8位用户对8支乐队的评价： 表中的短横表示这位用户没有给这支乐队打分。我们在计算两个用户的距离时，只采用他们都评价过的乐队，比如要计算Angelica和Bill的距离，我们只会用到5支乐队。这两个用户的曼哈顿距离为： 最后距离即是上方数据的加和：(1.5 + 1.5 + 3 + 2 + 1)。计算欧几里得距离的方法也是类似的，我们也只取双方都评价过的乐队。 用公式来描述即： 掌握了吗？ 那就试试计算其他几个用户之间的距离吧。]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>推荐</tag>
      </tags>
  </entry>
</search>
